{"version":3,"sources":["lookup/components.jsx","tweets/components.jsx","App.js","serviceWorker.js","index.js"],"names":["loadTweets","setTweets","fetch","then","response","json","r","catch","e","alert","handleDidLike","id","currCount","content","action","console","log","xhr","XMLHttpRequest","csrftoken","getCookie","open","setRequestHeader","data","JSON","stringify","onload","onerror","send","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","TweetList","props","useState","tweets","tweets2","setTweets2","useEffect","final","newTweets","concat","className","map","tweet","key","LikeBtn","likes","onClick","UnLikeBtn","ReTweetBtn","Tweet","style","display","TweetsComponent","textRef","React","createRef","setNewTweets","onSubmit","preventDefault","newVal","current","value","tempNewTweets","unshift","ref","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4f27561c.chunk.js","sourcesContent":["export const loadTweets = (setTweets) => {\n    fetch('http://127.0.0.1:8000/tweets/').then(response => response.json()).then(r => {\n      setTweets(r)\n    }).catch(e => alert(\"there was an error\"));\n}\n\nexport const handleDidLike = (id , currCount , content , action) => {\n    console.log(\"HI\")\n    const xhr = new XMLHttpRequest()\n    const csrftoken = getCookie('csrftoken')\n    xhr.open(\"POST\" , \"http://127.0.0.1:8000/tweet/action/\")\n    xhr.setRequestHeader(\"Content-Type\" , \"application/json\")\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\" , \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\" , \"XMLHttpRequest\") \n    xhr.setRequestHeader(\"X-CSRFToken\" , csrftoken)\n    console.log(id)\n    const data = JSON.stringify({\n        id : id,\n        action : action,\n        content : content\n    })\n    xhr.onload = () => {\n        console.log(\"HI\")\n        loadTweets();\n    }  \n    xhr.onerror = (e) => {\n        alert(\"there was an error2\")\n    }\n    xhr.send(data)\n}\n\nconst getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}","import React, { useState, useEffect } from 'react'\nimport { loadTweets , handleDidLike } from '../lookup/components'\n\n\n\n\n\nexport const TweetList = (props) => {\n    const [tweets , setTweets] = useState([])\n    const [tweets2 , setTweets2] = useState([])\n    useEffect(() => {\n        let final = [...props.newTweets].concat(tweets)\n        if (final.length !== tweets2.length) {\n            setTweets2(final)\n        }\n    } , [props.newTweets , tweets , tweets2])\n    useEffect(() => {\n        loadTweets(setTweets)\n    } , [])\n\n    return (\n        <div className=\"App\">\n        {tweets2.map(((tweet) => {\n            return <Tweet tweet={tweet} key={tweet.id} />\n        }))}\n    </div>\n    )\n}\n\nexport const LikeBtn = (props) => {\n    const {tweet} = props\n    console.log(tweet.id)\n    const [likes , setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const handleAction = (e) => {\n        e.preventDefault()\n        setLikes(tweet.likes + 1)\n    }\n    return <button className=\"btn btn-success ml-2\" onClick={() => handleDidLike(tweet.id , tweet.likes , tweet.content ,  'like')}>{likes} Like</button>\n}\nexport const UnLikeBtn = (props) => {\n    const {tweet} = props\n    return <button className=\"btn btn-danger ml-2\" onClick={() => handleDidLike(tweet.id , tweet.likes , tweet.content ,  'unlike')}>Un Like</button>\n}\nexport const ReTweetBtn = (props) => {\n    const {tweet} = props\n    return <button className=\"btn btn-info m-2\" onClick={() => handleDidLike(tweet.id , tweet.likes , tweet.content , 'retweet')}>Re Tweet</button>\n}\n\n\nexport const Tweet = props => {\n    const {tweet} = props\n    return (\n    <div style={{display: \"inline-block\"}} className='rounded m-3 col-12 col-md-5 col-lg-3 border bg-dark' id={\"tweet-\" + tweet.id}>\n      <h3 className='text-success'>Tweet {tweet.id}</h3>\n      <div className='text-info m-3'><p>{tweet.content ? tweet.content : 'NO CONTENT'}</p></div>\n      <div className='text-danger m-3'><p>Likes : {tweet.likes}</p></div>\n      <LikeBtn tweet={tweet} />\n      <UnLikeBtn tweet={tweet} />\n      <ReTweetBtn tweet={tweet} />\n    </div>)\n}\n\nexport const TweetsComponent = (props) => {\n    const textRef = React.createRef()\n    const [newTweets , setNewTweets] = useState([])\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(e)\n        const newVal = textRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n            likes : 0,\n            id:4\n        })\n        setNewTweets(tempNewTweets)\n        textRef.current.value = ''\n    }\n    return (\n        <div className={props.className}>\n            <div className=\"m-3\">\n                <form onSubmit={handleSubmit} className=\"col-6 offset-3\">\n                <div className=\"justify-content-center\">\n                    <textarea ref={textRef} className=\"form-control\" name=\"tweet\">\n\n                    </textarea>\n                    <button type='submit' className=\"btn btn-primary my-3\">Tweet</button>\n                </div>\n                </form>\n            </div>\n            <TweetList newTweets={newTweets}/>\n        </div>\n    )\n}","import React from 'react';\nimport {TweetsComponent} from './tweets/components'\nimport './App.css';\n\nfunction App() {\n\n  return (\n      <TweetsComponent className=\"text-center\" />\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}