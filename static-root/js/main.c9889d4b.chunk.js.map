{"version":3,"sources":["lookup/components.jsx","tweets/components.jsx","serviceWorker.js","index.js"],"names":["handleDidLike","id","callback","content","action","xhr","XMLHttpRequest","csrftoken","getCookie","open","setRequestHeader","data","JSON","stringify","onload","console","log","status","response","onerror","e","alert","send","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","TweetList","props","username","useState","tweets","setTweets","tweets2","setTweets2","useEffect","final","newTweets","concat","url","fetch","then","json","r","catch","loadTweets","className","map","tweet","reTweetCallback","key","Btns","likes","setLikes","handleAction","res","stat","parse","onClick","window","location","href","ReTweetBtn","ParentTweet","parent","Tweet","style","display","TweetsComponent","canTweet","textRef","React","createRef","setNewTweets","onSubmit","preventDefault","newVal","current","value","tempNewTweets","createTweet","unshift","ref","type","tempRetweet","TweetDetail","tweetId","lookup","setLookUp","setTweet","apiTweetDetail","Boolean","hostname","match","tweetEl","getElementById","ReactDOM","render","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c9889d4b.chunk.js","sourcesContent":["\nexport const loadTweets = (setTweets , username) => {\n    let url;\n    if (username) {\n        url = `http://127.0.0.1:8000/tweets/?username=${username}`\n    } else {\n        url = 'http://127.0.0.1:8000/tweets/'\n    }\n    fetch(url).then(response => response.json()).then(r => {\n      setTweets(r)\n    }).catch(e => alert(\"there was an error\"));\n}\n\nexport const handleDidLike = (id , callback , content , action) => {\n    const xhr = new XMLHttpRequest()\n    const csrftoken = getCookie('csrftoken')\n    xhr.open(\"POST\" , \"http://127.0.0.1:8000/tweet/action/\")\n    xhr.setRequestHeader(\"Content-Type\" , \"application/json\")\n    if(csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\" , \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\" , \"XMLHttpRequest\") \n        xhr.setRequestHeader(\"X-CSRFToken\" , csrftoken)\n    }\n    const data = JSON.stringify({\n        id : id,\n        action : action,\n        content : content\n    })\n    xhr.onload = () => {\n        console.log(xhr.status)\n        callback(xhr.response , xhr.status)\n    }  \n    xhr.onerror = (e) => {\n        alert(\"there was an error2\")\n    }\n    xhr.send(data)\n}\n\n\nexport const createTweet = (content , callback) => {\n    const xhr = new XMLHttpRequest()\n    const csrftoken = getCookie('csrftoken')\n    xhr.open(\"POST\" , \"http://127.0.0.1:8000/create-tweet\")\n    xhr.setRequestHeader(\"Content-Type\" , \"application/json\")\n   \n    if(csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\" , \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\" , \"XMLHttpRequest\") \n        xhr.setRequestHeader(\"X-CSRFToken\" , csrftoken)\n    }\n    const data = JSON.stringify({\n        content : content\n    })\n    xhr.onload = () => {\n        callback(xhr.response , xhr.status)\n    }  \n    xhr.onerror = (e) => {\n        alert(\"there was an error in create tweet\")\n    }\n    xhr.send(data)\n}\n\nconst getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport const apiTweetDetail = (tweetId , callback) => {\n    const xhr = new XMLHttpRequest()\n    // const csrftoken = getCookie('csrftoken')\n    xhr.open(\"GET\" , `http://127.0.0.1:8000/tweet/${tweetId}`)\n    xhr.setRequestHeader(\"Content-Type\" , \"application/json\")\n    // if(csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\" , \"XMLHttpRequest\")\n        // xhr.setRequestHeader(\"X-Requested-With\" , \"XMLHttpRequest\") \n        // xhr.setRequestHeader(\"X-CSRFToken\" , csrftoken)\n    // }\n    xhr.onload = () => {\n        callback(xhr.response , xhr.status)\n    }  \n    xhr.onerror = (e) => {\n        alert(\"there was an error\")\n    }\n    xhr.send()\n}","import React, { useState, useEffect, Fragment } from 'react'\nimport { loadTweets , handleDidLike , createTweet , apiTweetDetail } from '../lookup/components'\n\n\n\nexport const TweetList = (props) => {\n    const {username} = props\n    const [tweets , setTweets] = useState([])\n    const [tweets2 , setTweets2] = useState([])\n    useEffect(() => {\n        let final = [...props.newTweets].concat(tweets)\n        if (final.length !== tweets2.length) {\n            setTweets2(final)\n        }\n    } , [props.newTweets , tweets , tweets2])\n    useEffect(() => {\n        loadTweets(setTweets , username)\n    } , [username])\n\n    return (\n        <div className=\"App\">\n        {tweets2.map(((tweet) => {\n            return <Tweet tweet={tweet} setTweets={props.reTweetCallback} className='rounded m-3 col-10 border bg-dark' key={tweet.id} />\n        }))}\n    </div>\n    )\n}\n\nexport const Btns = (props) => {\n    const {tweet} = props\n    const [likes , setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const handleAction = (res , stat) => {\n        if(stat === 200)\n            setLikes(JSON.parse(res).likes)\n        else\n            alert(\"Error in like\")\n    }\n    return (\n        <Fragment>\n            <div className='text-danger m-3'><p>Likes : {likes}</p></div>\n            <button className=\"btn btn-success ml-2\" onClick={() => handleDidLike(tweet.id , handleAction , tweet.content ,  'like')}>Like</button>\n            <button className=\"btn btn-danger ml-2\" onClick={() => handleDidLike(tweet.id , handleAction , tweet.content ,  'unlike')}>Un Like</button>\n            <button className=\"btn btn-primary ml-2\" onClick={(e) => {console.log(\"HI\");window.location.href = `/${tweet.id}`}}>View</button>\n        </Fragment>\n    )\n}\n\nexport const ReTweetBtn = (props) => {\n    const {tweet , setTweets} = props\n    return <button className=\"btn btn-info m-2\" onClick={() => handleDidLike(tweet.id , setTweets , tweet.content , 'retweet')}>Re Tweet</button>\n}\n\nconst ParentTweet = (props) => {\n    const {tweet , setTweets} = props\n    return (\n        <Fragment>\n        {tweet.parent && <h3 className=\"text-success mt-3\">Retweet of :</h3>}\n            <div>\n                <p>{tweet.parent && <Tweet tweet={tweet.parent} setTweets={setTweets} className='rounded m-3 col-10 border bg-warning' />}</p>\n            </div>\n        </Fragment>\n    )\n}\n\n\nexport const Tweet = props => {\n    const {tweet , setTweets , className} = props\n    return (\n    <div style={{display: \"inline-block\"}} className={className} id={\"tweet-\" + tweet.id}>\n        <h3 className='text-success'>Tweet {tweet.id}</h3>\n        <ParentTweet tweet={tweet} setTweets={setTweets} />\n        <div className='text-info m-3'><p>{tweet.content ? tweet.content : 'NO CONTENT'}</p></div>\n        {className === 'rounded m-3 col-10 border bg-warning' ? <button className=\"btn btn-primary ml-2\" onClick={(e) => {console.log(\"HI\");window.location.href = `/${tweet.id}`}}>View</button> : null}\n        {className === 'rounded m-3 col-10 border bg-warning' ? null : <Fragment><Btns tweet={tweet} /><ReTweetBtn tweet={tweet} setTweets={setTweets} /></Fragment>}\n    </div>)\n}\n\nexport const TweetsComponent = (props) => {\n    const {username} = props\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const textRef = React.createRef()\n    const [newTweets , setNewTweets] = useState([])\n\n    const reTweetCallback = (res , stat) => {\n        var tempRetweet = [...newTweets]\n        if(stat === 201) {\n            tempRetweet.unshift(JSON.parse(res))\n            setNewTweets(tempRetweet)\n        } else {\n            alert(\"error in retweet\")\n        }\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const newVal = textRef.current.value\n        if(newVal.trim() === \"\") {\n            alert(\"Tweet can't be empty\")\n        } else {\n            var tempNewTweets = [...newTweets]\n            createTweet(newVal , (res , stat) => {\n                if(stat === 201) {\n                    tempNewTweets.unshift(JSON.parse(res))\n                    setNewTweets(tempNewTweets)\n                }\n                else {\n                    alert(\"error in create\")\n                }\n            })\n        }\n        textRef.current.value = ''\n    }\n    return (\n        <div className='text-center'>\n            {canTweet && <div className=\"m-3\">\n                <form onSubmit={handleSubmit} className=\"col-6 offset-3\">\n                <div className=\"justify-content-center\">\n                    <textarea ref={textRef} className=\"form-control\" name=\"tweet\">\n\n                    </textarea>\n                    <button type='submit' className=\"btn btn-primary my-3\">Tweet</button>\n                </div>\n                </form>\n            </div>}\n            <TweetList newTweets={newTweets} reTweetCallback={reTweetCallback} username={username} />\n        </div>\n    )\n}\n\nexport const TweetDetail = (props) => {\n    const {tweetId} = props\n    const [lookup , setLookUp] = useState(false)\n    const [tweet , setTweet] = useState(null)\n    useEffect(() => {\n        if(lookup === false) {\n            apiTweetDetail(tweetId , (res , stat) => {\n                if(stat === 200) {\n                    setTweet(JSON.parse(res))\n                } else {\n                    alert(\"error\")\n                }\n            })\n            setLookUp(true)\n        }\n    } , [lookup , setLookUp])\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} setTweets={props.setTweets} />\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent , TweetDetail } from './tweets/components';\n\n\nconst tweetEl = document.getElementById(\"root\");\nReactDOM.render(\n   <TweetsComponent username={tweetEl.dataset.username} canTweet={tweetEl.dataset.canTweet} />,\n  tweetEl\n);\nconst TweetDetailEl = document.querySelectorAll(\".tweet-detail\")\n\nTweetDetailEl.forEach(container => {\n  ReactDOM.render(\n    <TweetDetail tweetId={container.dataset.tweetId} className={container.dataset.className} />,\n   container\n );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}